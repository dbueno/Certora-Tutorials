diff --git a/src/expr/mkexpr b/src/expr/mkexpr
index c5f12f4..fff1000 100755
--- a/src/expr/mkexpr
+++ b/src/expr/mkexpr
@@ -219,22 +219,22 @@ function constant {
 
   mkConst_instantiations="${mkConst_instantiations}
 #line $lineno \"$kf\"
-template <> Expr ExprManager::mkConst($2 const& val);
+template <> Expr ExprManager::mkConst($2 const\& val);
 "
   mkConst_implementations="${mkConst_implementations}
 #line $lineno \"$kf\"
-template <> Expr ExprManager::mkConst($2 const& val) {
+template <> Expr ExprManager::mkConst($2 const\& val) {
 #line $lineno \"$kf\"
   return Expr(this, new Node(d_nodeManager->mkConst< $2 >(val)));
 }
 "
   getConst_instantiations="${getConst_instantiations}
 #line $lineno \"$kf\"
-template <> $2 const & Expr::getConst< $2 >() const;
+template <> $2 const \& Expr::getConst< $2 >() const;
 "
   getConst_implementations="${getConst_implementations}
 #line $lineno \"$kf\"
-template <> $2 const & Expr::getConst() const {
+template <> $2 const \& Expr::getConst() const {
 #line $lineno \"$kf\"
   PrettyCheckArgument(getKind() == ::CVC4::kind::$1, *this, \"Improper kind for getConst<$2>()\");
 #line $lineno \"$kf\"
diff --git a/src/expr/mkmetakind b/src/expr/mkmetakind
index e2a733e..4a7ca54 100755
--- a/src/expr/mkmetakind
+++ b/src/expr/mkmetakind
@@ -227,7 +227,7 @@ function constant {
   register_metakind CONSTANT "$1" 0
   metakind_getConst_decls="${metakind_getConst_decls}
 template <>
-$2 const& NodeValue::getConst< $2 >() const;
+$2 const\& NodeValue::getConst< $2 >() const;
 "
   metakind_constantMaps_decls="${metakind_constantMaps_decls}
 template <>
@@ -249,7 +249,7 @@ struct ConstantMapReverse< ::CVC4::kind::$1 > {
 #pragma GCC diagnostic ignored \"-Wstrict-aliasing\"
 
 template <>
-$2 const& NodeValue::getConst< $2 >() const {
+$2 const\& NodeValue::getConst< $2 >() const {
   AssertArgument(getKind() == ::CVC4::kind::$1, *this,
                  \"Improper kind for getConst<$2>()\");
   // To support non-inlined CONSTANT-kinded NodeValues (those that are
@@ -417,6 +417,7 @@ for var in \
     template \
     ; do
   eval text="\${text//\\\$\\{$var\\}/\${$var}}"
+  # text="${text//\${$var}/??"
 done
 error=`expr "$text" : '.*\${\([^}]*\)}.*'`
 if [ -n "$error" ]; then
